services:

  zeiterfassung:
    image: urlaubsverwaltung/zeiterfassung:2.23.7
    network_mode: "host"
    environment:
      SERVER_PORT: 8080
      # Database
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/zeiterfassung
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      # Mail
      ZEITERFASSUNG_MAIL_FROM: zeiterfassung@example.org
      ZEITERFASSUNG_MAIL_FROMDISPLAYNAME: zeiterfassung
      ZEITERFASSUNG_MAIL_REPLYTO: replyto@example.org
      ZEITERFASSUNG_MAIL_REPLYTODISPLAYNAME: replyto
      SPRING_MAIL_HOST: localhost
      SPRING_MAIL_PORT: 1025
      # OpenID Connect identity provider
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_DEFAULT_CLIENT-ID: zeiterfassung
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_DEFAULT_CLIENT-SECRET: zeiterfassung-secret
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_DEFAULT_CLIENT-NAME: zeiterfassung
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_DEFAULT_PROVIDER: default
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_DEFAULT_SCOPE: openid,profile,email,roles
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_DEFAULT_AUTHORIZATION-GRANT-TYPE: authorization_code
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_DEFAULT_REDIRECT-URI: http://{baseHost}:8080/login/oauth2/code/{registrationId}
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_DEFAULT_ISSUER-URI: http://localhost:8090/realms/zeiterfassung-realm
      ZEITERFASSUNG_SECURITY_OIDC_SERVER-URL: http://localhost:8090
      ZEITERFASSUNG_SECURITY_OIDC_LOGIN-FORM-URL: http://localhost:8080/oauth2/authorization/default
      ZEITERFASSUNG_SECURITY_OIDC_CLAIM-MAPPERS_GROUP-CLAIM_ENABLED: true
      SPRING_AUTOCONFIGURE_EXCLUDE: org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration
    depends_on:
      keycloak:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mailhog:
        condition: service_started

  postgres:
    image: postgres:16.1
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: zeiterfassung
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 3s
      timeout: 1s
      retries: 5

  mailhog:
    image: mailhog/mailhog:v1.0.1
    ports:
      - '1025:1025'
      - '8025:8025'

  keycloak:
    image: quay.io/keycloak/keycloak:26.3.3
    command: ["start-dev", "--import-realm"]
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_PORT: 8090
      KC_HOSTNAME_STRICT: 'false'
      KC_HOSTNAME_STRICT_HTTPS: 'false'
      KC_HEALTH_ENABLED: 'true'
      KC_CACHE: 'local'
      KC_HOSTNAME: 'localhost'
    ports:
      - '8090:8090'
    volumes:
      - ./keycloak/import:/opt/keycloak/data/import
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/live']
      interval: 5s
      timeout: 5s
      retries: 30
